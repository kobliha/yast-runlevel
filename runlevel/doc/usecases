							-*- outline -*-
$Id$

By default, show the simple service list.
there should be a "changed" indicator (implicit for AY)

When running the scripts, time out and let user kill them
(extend target agent (16555) or use .background?)

In interactive mode, dependencies are honored.
In expert mode, dependencies can be turned off.
TODO: $ALL

* Simple

** see the (boot) status of a service
in simple mode, disregard current status
simple: hide boot scripts (and some others? parts of SuSEfirewall2)

*** TODO interface testsuite
todo: make a generic testsuite for init scripts, to be run
automatically in a default installed system

** turn service on/off
Two buttons: on, off
Does both immediate action and symlinks (hmm, atomicity?)
Deps.

** restore service to default (if we know)

* Expert

shows all runlevels (incl boot), all services
(we should log what is done
hmm, make a backup?)

** change the default runlevel

** service: see status in each runlevel

** service: change status in single runlevel
Deps.

** service: enable in default runlevels/disable 
Deps.

** service: see current status

** service: refresh status
and show init script output

** service: start/stop now
Deps.
Maybe other actions
 LSB: restart, reload, force-reload
 SuSE: try-restart, probe

* Autoyast writing

It marks the _differences_ (changes, actions) to be done.
Or the resulting status?
It's a _collection_
We want to _change_ a collection by _changing_ or setting the _status_
of its items.

No sense in setting status of the whole collection.
Or really, what about cloning?

** change the default runlevel

** service: set in which runlevels to start

** service: enable in default runlevels/disable 

* Autoyast CMS

something like the expert mode

have a list of all services (and their default state, if available)
cooperate with packager like inetd?

** change the default runlevel

** service: set in which runlevels to start

** service: enable in default runlevels/disable 

** show summary

* Autoyast cloning

write: default runlevel, for all services: set runlevels
ay::"Read" probably cannot use RLE::Read, make a RLE::Clone function.
