/**
 * File:
 *   Runlevel.ycp
 *
 * Package:
 *   Runlevel Editor
 *
 * Summary:
 *   Exported functionality
 *
 * Authors:
 *   Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 *
 * Function exported by runlevel editor to other modules.
 */

{
    module "Runlevel";
    textdomain "runlevel";
    import "Progress";
    import "Summary";
    import "Report";

    include "runlevel/toposort.ycp";

    /**
     * @struct service
     * One service is described by such map: <pre>
      "servicename" : $[
	"defstart" : [ "2", "3", "5", ], // Default-Start comment
	"defstop"  : [ "0", "1", "6", ], // Default-Stop  comment

	"reqstart" : [ "$network", "portmap" ], // Required-Start comment
	"reqstop"  : [ "$network", "portmap" ], // Required-Stop  comment

	"description" : "text...",       // Description comment

	"start" : [ "3", "5", ], // which runlevels service is really started/stopped in
	"stop"  : [ "3", "5", ], // read from /etc/init.d/rc?.d/* links

	"started" : 0, // return from rcservice status (integer)

	"dirty" : false, // was the entry changed?
      ]</pre>
     */
    //
    //


    /**
     * Get service info without peeking if service runs.
     * @param name name of the service
     * @return service information
     */
    global define map ServiceInfo (string name) ``{
	// This is an info achieved just by a call of
	// the 2 main agent calls. Nothing about service
	// status is obtained.
	if (!SCR::Read (.init.scripts.exists, name))
	    return $[];
	map detail = lookup (SCR::Read (.init.scripts.runlevel, name), name, $[]);
	map service = lookup (SCR::Read (.init.scripts.comment, name), name, $[]);
	return add (
	    add (service, "start", lookup (detail, "start", [])),
	    "stop", lookup (detail, "stop", []));
    }

    /**
     * Get service status. It is output from "rcservice status".
     * It should conform to LSB. 0 means running.
     * @param name name of the service
     * @return init script exit status or -1 if it does not exist
     */
    global define integer ServiceStatus (string name) ``{
	if (!SCR::Read (.init.scripts.exists, name))
	    return -1;
	return SCR::Execute (.target.bash, sformat ("/etc/init.d/%1 status", name), $["TERM":"raw"]);
    }
    /**
     * Get service info and finds out whether service is running.
     * @param name name of the service
     * @return service map
     */
    global define map ServiceFullInfo (string name) ``{
	if (!SCR::Read (.init.scripts.exists, name))
	    return $[];
	return add (ServiceInfo (name), "started", ServiceStatus (name));
    }

    /**
     * Adjust runlevels in which service runs.
     * @param name service name
     * @param action "disable" -- remove links, "enable" -- if there are
     *    no links, set default, otherwise do nothing, "default" -- set
     *    defaults.
     * @return success state
     */
    global define boolean ServiceAdjust (string name, string action) ``{
	if (!SCR::Read (.init.scripts.exists, name))
	{
	    y2error ("Init script %1 does not exist.", name);
	    return false;
	}
	map service = ServiceInfo (name);
	if ("disable" == action)
	{
	    if (size (lookup (service, "start", [])) != 0)
	    {
		if (0 != SCR::Execute (.target.bash, sformat ("/sbin/insserv -r %1", name)))
		    return false;
	    }
	    return true;
	}
	if ("enable" == action)
	{
	    if (size (lookup (service, "start", [])) == 0)
	    {
		if (0 != SCR::Execute (.target.bash, sformat ("/sbin/insserv -d %1", name)))
		    return false;
	    }
	    return true;
	}
	if ("default" == action)
	{
	    return ((0 != SCR::Execute (.target.bash, sformat ("/sbin/insserv -d %1", name))))
		? false : true;
	}
	y2error ("ServiceAdjust: bad action %1", action);
	return false;
    }

    /**
     * Set service to run in selected runlevels.
     * @param name name of service to adjust
     * @param rl list of runlevels in which service should start
     * @return success state
     */
    global define boolean ServiceFinetune (string name, list rl) ``{
	if (!SCR::Read (.init.scripts.exists, name))
	{
	    y2error ("Init script %1 does not exist.", name);
	    return false;
	}
	string fill = "";
	string out = "";
	foreach (`i, rl, ``{
	    out = out + fill + sformat ("%1", i);
	    fill = ",";
	});
	// we must remove it first because insserv start=... adds
	// runlevels, not replace runlevels!!
	integer ret = SCR::Execute (.target.bash, sformat ("/sbin/insserv -r %1", name));
	if ("" == out)
	    return 0 == ret;
	return 0 == SCR::Execute (.target.bash, sformat ("/sbin/insserv %1,start=%2", name, out));
    }

    /**
     * Run init script.
     * @param name init service name
     * @param param init script argument
     * @return integer exit value
     */
    global define integer RunInitScript (string name, string param) ``{
	return SCR::Execute (.target.bash,
			     sformat ("/etc/init.d/%1 %2", name, param),
			     $[ "TERM" : "raw"]);
    }

    string lang = nil;
    /**
     * Run init script and return also its output (stdout and stderr merged).
     * @param name init service name
     * @param param init script argument
     * @return map of $[ "stdout" : "...", "stderr" : "...", "exit" : int,]
     */
    global define map RunInitScriptOutput (string name, string param) ``{
	map env = $["TERM": "raw"];

	// encoding problems - append .UTF-8 to LANG
	if (lang == nil)
	{
	    lang = lookup (SCR::Execute (.target.bash_output, "echo -n $LANG"),
			   "stdout", "");
	    list ll = splitstring (lang, ".");
	    lang = ll[0]:"";
	    if (lang != "")
	    {
		lang = lang + ".UTF-8";
	    }
	    y2debug ("LANG: %1", lang);
	}
	if (lang != "")
	{
	    env = add (env, "LANG", lang);
	}

	// looks like a bug in bash...
	string locale_debug = "";
	// locale_debug = "; ls /nono 2>&1; /usr/bin/locale; /usr/bin/env";

	return SCR::Execute (.target.bash_output,
			     sformat ("/etc/init.d/%1 %2 2>&1", name, param)
			     + locale_debug,
			     env);
    }

    /* ------------------------------------------------------------ */
    /*
     * The above interface was very public. Now there is interface for
     * package.
     */

    /**
     * List of all services. Each item is a map described above.
     * @ref service
     */
    global map services = $[];

    /**
     * List of all service names.
     */
    global list service_list = [];

    /**
     * Default runlevel (after boot)
     */
    global string default = "";
    /**
     * Backup of default runlevel.
     */
    string default_orig = "";

    /**
     * List of all runlevels available in the system.
     */
    global list runlevels = [];

    /**
     * Current runlevel
     */
    global string current = "";

    /* Dependency solving: */
    /**
     * ONLY ONE SCRIPT provides a facility in this model.
     * In SuSE packages, the only exception are sendmail and postfix
     * both providing sendmail but they cannot be installed together
     * anyway.
     * atd has Provides: at, so
     *   what_provides["at"] == "atd";
     * Identity is not represented explicitly: ypbind has Provides: ypbind, but
     *   haskey (what_provides, "ypbind") == false;
     */
    map what_provides = $[];

    /**
     * System facility definitions
     * /etc/insserv.conf:
     *   system_requires["$remote_fs"] == ["$local_fs", "nfs"];
     */
    map system_requires = $[];

    /**
     * Read settings
     * @return success
     */
    global define boolean Read () ``{
	Progress::Simple (_("Initializing runlevel editor. Please wait."), " ", 7, "");
	Progress::NextStep ();
	runlevels= SCR::Read (.init.scripts.runlevel_list);
	if (0 == size (runlevels))
	{
	    runlevels = ["0", "1", "2", "3", "5", "6", "S", ];
	}
	Progress::NextStep ();

	current = SCR::Read (.init.scripts.current_runlevel);
	Progress::NextStep ();

	//..
	default= SCR::Read (.init.scripts.default_runlevel);
	default_orig = default;
	Progress::NextStep ();

	system_requires = SCR::Read (.init.insserv_conf);
	Progress::NextStep ();

	map details = SCR::Read (.init.scripts.runlevels);
	Progress::NextStep ();
	services = SCR::Read (.init.scripts.comments);
	Progress::NextStep ();
	services = mapmap (string k, map v, services, ``{
	    foreach (string f, v["provides"]:[], ``{
		// identity implicit; only the first script provides a facility
		if (f != k && !haskey (what_provides, f))
		{
		    what_provides = add (what_provides, f, k);
		}
	    });

	    service_list = add (service_list, k);


	    // play tennis
	    map second_service = lookup (details, k, $[]);
	    v = add (v, "start", lookup (second_service, "start", []));
	    v = add (v, "stop" , lookup (second_service, "stop",  []));
	    return [ k, v ];
	});
	buildRequires ();
	what_requires = ReverseGraph (requires);
	Progress::NextStep ();
	return true;
    }

    /**
     * A graph where nodes are scripts or system facilities
     * but not normal facilities (ie. provides are solved).
     */
    map requires = $[];
    /**
     * Like "requires" but in reverse direction.
     * Used for stopping and disabling services.
     */
    map what_requires = $[];
    /**
     * If there's a dependency loop, dependency checking is disabled.
     */
    boolean dependencies_disabled = false;
    /**
     * Create requires from services, system_requires and what_provides.
     */
    define void buildRequires () ``{
	foreach (string service, map comments, services, ``{
	    addRequires (service, comments["reqstart"]:[]);
	});
	foreach (string sys_f, list req, system_requires, ``{
	    addRequires (sys_f, req);
	});
    }
    /**
     * Resolve provides and add the requirements to "requires".
     * Missing services are not detected.
     * @param service a service
     * @param req_facilities its required facilities
     */
    define void addRequires (string service, list(string) req_facilities) ``{
	list req_s = maplist (string f, req_facilities,
			      ``( what_provides[f]:f ));
	requires = add (requires, service, req_s);
    }

    /**
     * Resolve which services need to be enabled/disabled
     * @param service a service
     * @param enable enabling or disabling a service?
     * @return a list of services (excluding itself) required to start
     * a service (enable) or to be stopped because they require the
     * service (disable), ordered by their dependencies. Missing
     * services are included, system facilities excluded.<br>
     * If dependencies are disabled, returns an empty list, as if
     * there were no dependencies.
     */
    global define list(string) ServiceDependencies (string service,
						    boolean enable) ``{
	if (dependencies_disabled)
	{
	    return [];
	}
	// make a dependency subgraph
	map s_req = ReachableSubgraph (enable? requires: what_requires,
				       service);
	y2debug ("DEPGRAPH %1: %2", service, s_req);
	// sort it
	list r = TopologicalSort (s_req);
	list sorted = r[0]:[];
	list rest = r[1]:[];
	if (size (rest) > 0)
	{
	    // TODO: localize the loop, disable it only locally
	    // and say what scripts form it
	    Report::Error (_("A dependency loop was detected.
Further dependency checking will be disabled."));
	    dependencies_disabled = true;
	}

	// filter system facilities
	sorted = filter (string f, sorted, ``(substring (f, 0, 1) != "$"));
	// remove the original service
	sorted = remove (sorted, 0);
	// reverse it so that the required services are first
	return reverse (sorted);
    }

    /**
     * Argh, not a builtin
     * @param l a list
     * @return reversed list
     */
    define list reverse (list l) ``{
	if (l == nil)
	{
	    return nil;
	}
	list result = [];
	foreach (any item, l, ``{
	    result = prepend (result, item);
	});
	return result;
    }
    /**
     * Filter out already started/stopped services.
     * @param svcs	service list to be started/stopped
     * @param start	start/stop
     * @return a list of scripts that must really be started/stopped
     */
    global define list(string) FilterStartStop (list(string) svcs,
						boolean start) ``{
	return filter (string service, svcs, ``{
	    integer started = services[service, "started"]:-1;
	    // keep it in the list if the wanted result
	    // is different from the current state
	    return start != (started == 0);
	});
    }
    /**
     * Filter out already enabled/disabled services.
     * @param svcs	service list to be enabled/disabled
     * @param rl	which runlevel
     * @param enable	enabling or disabling?
     * @return a list of scripts that must really be enabled/disabled
     */
    global define list(string) FilterEnableDisable (list(string) svcs,
						    string rl,
						    boolean enable) ``{
	return filter (string service, svcs, ``{
	    list start = services[service, "start"]:[];
	    // keep it in the list if the wanted result
	    // is different from the current state
	    return enable != contains (start, rl);
	});
    }
    /**
     * Filter out already enabled/disabled services.
     * @param svcs	service list to be enabled/disabled
     * @param rls	which runlevels (all of them).
     *  For disabling, must be nil, meaning disable in all.
     * @param enable	enabling or disabling?
     * @return a list of scripts that must really be enabled/disabled
     */
    global define list(string) FilterEnableDisableSet (list(string) svcs,
						    list(string) rls,
						    boolean enable) ``{
	if (enable)
	{
	    return filter (string service, svcs, ``{
		list start = services[service, "start"]:[];
		// keep it in the list
		// if it should start in a bigger set than now
		return !subset (rls, start);
	    });
	}
	else
	{
	    if (rls != nil)
	    {
		// should not happen
		y2error ("Disabling in a nontrivial set of runlevels (%1) not implemented.", rls);
		return nil;
	    }
	    else
	    {
		return filter (string service, svcs, ``{
		    list start = services[service, "start"]:[];
		    // keep it in the list
		    // if it is enabled now
		    return start != [];
		});
	    }
	}
    }

    /**
     * @param a a set
     * @param b a set
     * @return a \subseteq b
     */
    define boolean subset (list a, list b) ``{
	return size (union (a, b)) <= size (b);
    }

    /**
     * Set all dirty services as clean and tries to read
     * original "start"/"stop" for them.
     */
    global define void ClearServices () ``{
	services = mapmap (`k, `v, services, ``{
	    if (lookup (v, "dirty", false))
	    {
		v = add (v, "dirty", false);
		map r = SCR::Read (.init.scripts.runlevel, k);
		r = lookup (r, k, $[]);
		v = add (v, "start", lookup (r, "start", []));
		v = add (v, "stop", lookup (r, "stop", []));
	    }
	    return [k, v];
	});
    }

    /**
     * Is a service disabled?
     * Checks whether the list of runlevels it runs in is empty
     * @param service service to check
     * @return boolean true if service is disabled
     */
    global define boolean isDisabled (map service) ``{
	return 0 == size (lookup (service, "start", []));
    }

    /**
     * Check for portmap. Portmap should be started if inetd, nfs,
     * nfsserver, nis, ... is started. This checks the dependency.
     * @return string name of the first enabled service that requires portmap
     */
    global define string CheckPortmap () ``{
	if (!isDisabled (lookup (services, "portmap", $[])))  // if portmap is enabled, there is no problem
	    return nil;
	string req = nil;
	list in = [];
	foreach (`k, `v, services, ``{
	    if (contains (lookup (v, "reqstart", []), "portmap") && size (lookup (v, "start", [])) > 0)
	    {
		in = union (in, toset (lookup (v, "start", [])));
		if (nil == req)
		    req = k;
	    }
	});
	return size (in) > 0 ? req : nil;
    }
    /**
     * If inetd and xinetd are enabled together, show a warning.
     * @return are both of them enabled?
     */
    global define boolean CheckXInetd () ``{
	return !isDisabled (lookup (services, "inetd", $[])) && !isDisabled (lookup (services, "xinetd", $[]));
    }

    /**
     * Save changed services into proper runlevels. Save also changed
     * default runlevel.
     */
    global define void Write () ``{
	integer prsize = size (services);
	Progress::Simple (_("Saving changes to runlevels."), " ", prsize + 1, "");

	if (default != default_orig)
	    SCR::Write (.init.scripts.default_runlevel, default);
	Progress::NextStep ();

	foreach (`k, `v, services, ``{
	    if (lookup (v, "dirty", false))
	    {
		Progress::Title (sformat (_("Service %1"), k));
		// save!
		string add_comma = "";
		list start = lookup (v, "start", []);
		if (contains (lookup (v, "defstart", []), "B"))
		{
		    start = union (start, [ "B" ]);
		}
		string commandline = "";
		if (size (start)>0)
		{
		    commandline = sformat ("/sbin/insserv -r %1; /sbin/insserv %1,start=", k);
		    foreach (`i, start, ``{
			commandline = commandline + add_comma + i;
			add_comma = ",";
		    });
		}
		else
		{
		    commandline = sformat ("/sbin/insserv -r %1", k);
		}
		y2milestone ("%1 ===> Running %2", k, commandline);
		SCR::Execute (.target.bash, commandline);
	    }
	    else
		Progress::Title (sformat (_("Skipping service %1."), k));
	    Progress::NextStep ();
	});
	Progress::NextStep ();
    }

    /**
     * Were some settings changed?
     * @return true if yes
     */
    global define boolean isDirty () ``{
	if (default != default_orig)
	    return true;

	boolean dirty = false;
	foreach (`k, `v, services, ``{
	    if (dirty)
	    {
		return ;
	    }
	    if (lookup (v, "dirty", false))
	    {
		dirty = true;
	    }
	});
	return dirty;
    }

    /**
     * Returns true if any link in /etc/init.d/rc?.d/ exists for this
     * script. If service does not exist, logs an error.
     * @param name service name
     * @return true if service is set to run in any runlevel
     */
    global define boolean ServiceEnabled (string name) ``{
	// Fhis is an info achieved just by a call of
	// the 2 main agent calls. Nothing about service
	// status is obtained.
	if (!SCR::Read (.init.scripts.exists, name))
	{
	    y2error ("Service does not exist: %1", name);
	    return false;
	}
	map detail = lookup (SCR::Read (.init.scripts.runlevel, name), name, $[]);
	return 0 != size (lookup (detail, "start", []));
    }

    /**
     * Export user settings.
     * @return user settings:<pre>$[
     *    "services": $[ map of dirty services ],
     *    "default":  the default runlevel, if changed,
     *]</pre>
     */
    global define map Export () ``{
	map svc = filter (`k, `v, services, ``{
	    return lookup (v, "dirty", false);
	});
	list tmp_services = maplist(string service_name, map service_data, svc, ``{
	    string  service_start = mergestring(lookup(service_data,"start",[]), " ");
	    string service_stop = mergestring(lookup(service_data,"stop",[]), " ");
	    map service_map =
	    $[
	      "service_name":service_name,
	      "service_start":service_start,
	      "service_stop":service_stop
	    ];
	    return (service_map);
	});
	map ret = $[ "services" : tmp_services ];
	if (default != default_orig)
	{
	    ret = add (ret, "default", default);
	}
	return ret;
    }
    /**
     * Import user settings
     * @param s user settings
     * @see Export
     * @return success state
     */
    global define boolean Import (map s) ``{
	runlevels= SCR::Read (.init.scripts.runlevel_list);
	if (0 == size (runlevels))
	{
	    runlevels = ["0", "1", "2", "3", "5", "6", "S", ];
	}

	//..
	default= SCR::Read (.init.scripts.default_runlevel);
	default_orig = default;

	// and finaly process map being imported
	list new = lookup (s, "services", []);
	map tmp_services = listmap(map service, new,  ``{
	    string name = lookup(service,"service_name","");
	    list start = splitstring(lookup(service,"service_start",""), " ");
	    list stop = splitstring(lookup(service,"service_stop",""), " ");
	    map service_map = $[];
	    service_map = add(service_map,"start",start);
	    service_map = add(service_map,"stop",stop);
	    return([name,service_map]);
	});

	if (size (tmp_services) > 0)
	{
	    foreach (`k, `v, tmp_services, ``{
		if (nil == lookup (services, k, nil))
		{
		    y2milestone ("Service %1 is not installed on target system, adding it by hand.", k);
		}
		v = add (v, "dirty", true);
		services = add (services, k, v);
	    });
	}
	// default
	if (haskey (s, "default"))
	{
	    default = lookup (s, "default", nil);
	    default_orig = "---";
	}
	return true;
    }

    /**
     * @return Html formatted configuration summary
     */
    global define string Summary()
	``{

	map rl = $[
	    "0" : _("0: System halt"),
	    "1" : _("1: Single user mode"),
	    "2" : _("2: Local multiuser without remote network"),
	    "3" : _("3: Full multiuser with network"),
	    "4" : _("4: User defined"),
	    "5" : _("5: Full multiuser with network and xdm"),
	    "6" : _("6: System reboot"),
	    ];

	string sum = "";
	sum = Summary::AddHeader(sum, _("Current Runlevel"));
	sum = Summary::AddLine(sum,  rl[default]:"");
	sum = Summary::AddHeader(sum, _("Services"));

	if (size(services)>0) {
	    sum = Summary::OpenList(sum);
	    foreach(`k, `v, services,
		``{
		if (v["dirty"]:false)
		    sum = Summary::AddListItem(sum, "<p><b>" + k + "</b><br> Start: " + mergestring(v["start"]:[], " ") + "<br>" +" Stop: " + mergestring(v["stop"]:[], " ") + "</p>" );
	    });

	    sum = Summary::CloseList(sum);
	}
	else
	{
	    sum =  Summary::AddLine(sum, Summary::NotConfigured());
	}
	return sum;
    }

}
