#!/bin/bash

#
# File:
#  ag_initscripts
# Module:
#  Runlevel editor.
# Summary:
#  Agent for reading initscripts info.
# Authors:
#  Petr Blahos <pblahos@suse.cz>, 2001
#
# $Id$
#
################################################################
# .init.scripts.comments
#    returns map of services, e.g.:
#     $[
#    "xdm" : $[
#          "reqstart" : [ "$remote_fs", "$syslog", "ypbind", ],
#          "reqstop" : [ ],
#          "defstart" : [ 5, ],
#          "defstop" : [ ],
#          "description": "X Display Manager",
#     ],
#     "xfs" : $[
#          "reqstart" : [ "network", "route", "named", ],
#          "reqstop" : [ ],
#          "defstart" : [ 3, 5, ],
#          "defstop" : [ ],
#          "description": "X Font Server",
#     ],
#     ]
################################################################
# .init.scripts.runlevels
#   return maps of services and runlevels they run in, e.g.:
#     $[
#     "xfs" : $[
#           "start" : [ "3", "5", ]
#           "stop"  : [ "1", "2", "6",  ]
#     ]
#     ]
# where in key, first character is name of runlevel and second
# is S for start and K for kill. In value there is a list of
# services that are started/killed in given runlevel.
################################################################
# .init.scripts.current_runlevel
#   return string -- current runlevel.
################################################################
# .init.scripts.runlevel_list
#   return list of runlevels
################################################################
# .init.script.default_runlevel
#   read/write default runlevel
################################################################

export LC_ALL=C
exec 2>/dev/null


get_script_info () {
/usr/bin/awk '
    BEGIN {
            in_comment = 0; in_descr = 0; skip_file = 0; first_time = 1;
        }
    first_time {
            first_time = 0;
            if (FILENAME ~ /\.local$/ || FILENAME ~ /\.rpm/ || FILENAME ~ /\.ba/ ||
                FILENAME ~ /\.old$/ || FILENAME ~ /\.new$/ || FILENAME ~ /\.save$/ || 
                FILENAME ~ /\.swp$/ || FILENAME ~ /\.core$/ || FILENAME ~ /~$/ ||
                FILENAME ~ /\.[^0-9$.#_\-\\*]*[0-9$.#_\-\\*]/)
                skipfile = 1;
            else
                printf "\"%s\" : $[\n", FILENAME ;
        }
    skipfile {
            nextfile;
        }
    { in_continue = 1; }
    /^### BEGIN INIT INFO/ {
            in_continue = 0;
            in_descr = 0;
            description = "";
            in_comment = 1;
        }
    in_continue && /^### END INIT INFO/ {
            in_continue = 0;
            in_descr = 0;
            in_comment = 0;
            gsub (/"/, "\\\"", description);
            print "     \"description\": \""description"\",";
            print "],"; 
            nextfile;
        }
    in_continue && in_comment && $2 == "Default-Start:" {
            in_continue = 0;
            in_descr = 0;
            printf "     \"defstart\" : [ ";
            for (i = 3; i<= NF; i++) printf ("\"%s\", ", $i) ;
            print "],";
        }
    in_continue && in_comment && $2 == "Default-Stop:" {
            in_continue = 0;
            in_descr = 0;
            printf "     \"defstop\" : [ ";
            for (i = 3; i<= NF; i++) printf ("\"%s\", ", $i) ;
            print "],";
        }
    in_continue && in_comment && $2 == "Required-Start:" {
            in_continue = 0;
            in_descr = 0;
            printf "     \"reqstart\" : [ ";
            for (i = 3; i<= NF; i++) printf ("\"%s\", ", $i) ;
            print "],";
        }
    in_continue && in_comment && $2 == "Required-Stop:" {
            in_continue = 0;
            in_descr = 0;
            printf "     \"reqstop\" : [ ";
            for (i = 3; i<= NF; i++) printf ("\"%s\", ", $i) ;
            print "],";
        }
    in_continue && in_comment && $2 == "Description:" {
            in_continue = 0;
            in_descr = 1;
            description = $3;
            for (i = 4; i<= NF; i++) description = description " " $i;
        }
    in_continue && in_comment && in_descr && (/^#\ \ / || /^#\t/) {
            in_continue = 0;
            $1 = "";
            description = description $0;
        }
    in_continue && in_comment { in_descr = 0; }

'  $1
}

process_all_scripts () {
    cd /etc/init.d
    for i in * ; do
        if [ -f $i ] ; then
            case "$i" in
                "reboot" | "halt" | "single" | "README" | "core" | "rc" | "rx" | "skeleton" | "powerfail" | "boot")
                    ;;
                *)
                    get_script_info $i
            esac
        fi
    done
}
# Read (.runlevels)
read_runlevels () {
    /usr/bin/find /etc/init.d | /usr/bin/awk -F / '
    BEGIN { SUBSEP = ":"; }
    $4 ~ /^rc.\.d$/ && $5 ~ /^[SK][0-9][0-9]/ {
        scripts [substr ($5, 4)] = 1;
        if (substr ($5, 1, 1) == "K") {
            K [substr ($5, 4)] = K [substr ($5, 4)] "\"" substr ($4, 3, 1) "\", ";
        }
        else if (substr ($5, 1, 1) == "S") {
            S [substr ($5, 4)] = K [substr ($5, 4)] "\"" substr ($4, 3, 1) "\", ";
        }
    }
    $4 ~ /^boot.d$/ && $5 ~ /^[SK][0-9][0-9]/ {
        scripts [substr ($5, 4)] = 1;
        if (substr ($5, 1, 1) == "K") {
            K [substr ($5, 4)] = K [substr ($5, 4)] "\"B\", ";
        }
        else if (substr ($5, 1, 1) == "S") {
            S [substr ($5, 4)] = K [substr ($5, 4)] "\"B\", ";
        }
    }
    END {
        print "$[";
        for (i in scripts) {
            printf "\"%s\" : $[\n", i;
            printf "     \"start\" : [ %s ],\n", S [i];
            printf "     \"stop\"  : [ %s ],\n", K [i];
            print "],"
        }
        print "]";
    }
    '
}

while true ; do
    IFS=
    read COMMAND || exit
    unset IFS

    case "$COMMAND" in
	"result ("*)
	    exit
	    ;;

	'Read (.comments)')
            echo '$['
            process_all_scripts 
            echo ']'
	    ;;

	'Read (.runlevels)')
            read_runlevels 
	    ;;

        'Read (.current_runlevel)')
            /sbin/runlevel | /usr/bin/awk ' { print "\"" $2 "\"" }'
            ;;

        'Read (.default_runlevel)')
            /bin/grep 'id:.:initdefault:' /etc/inittab | /bin/sed -e s/id:/\"/g -e s/:initdefault:/\"/g
            ;;

        'Read (.runlevel_list)')
            echo -n "["
            /usr/bin/awk '/^[^#]..*\/etc\/init\.d\/rc / { print "\"" $2 "\"," }' /etc/inittab
            echo "]"
            ;;

        "Write (.default_runlevel,"*)
            rootpart=$(echo "$COMMAND" | sed 's/^Write (.default_runlevel, *"\(.*\)")/\1/')
            /usr/bin/sed s/^id:.:initdefault:/id:$rootpart:initdefault:/g /etc/inittab > /etc/inittab.yast2.tmp
            if [ $? = 0 ] ; then
                mv /etc/inittab.yast2.tmp /etc/inittab
                chmod 0644 /etc/inittab
                chown root:root /etc/inittab
                echo "0"
            else
                echo "-1"
            fi
            ;;

	*)
	    echo nil
    esac
done
