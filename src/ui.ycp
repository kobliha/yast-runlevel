/**
 * File:
 *   ui.ycp
 *
 * Module:
 *   Runlevel Editor
 *
 * Summary:
 *   Runlevel Editor user interface.
 *
 * Authors:
 *   Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 *
 * Runlevel editor user interface functions.
 */

{
    textdomain "runlevel";

    import "Runlevel";
    import "RunlevelEd";
    import "Wizard";
    include "ui/common_popups.ycp";

    /**
     * Create term of checkboxes for runlevel selection.
     * @return HBox full of checkboxes.
     */
    global define term getRlCheckBoxes () ``{
	term rls = `HBox (`opt (`hstretch));
	foreach (`i, RunlevelEd::runlevels, ``{
	    if (size (rls) > 1)
		rls = add (rls, `HStretch ());
	    rls = add (rls, `CheckBox (`id (i), `opt (`notify), "&" + i));
	});
	return rls;
    }
    /**
     * Changes value of a runlevel checkbox.
     * Prevents triggering userinput by disabling notify.
     * @param service @ref service
     * @param rl which runlevel
     */
    global define void updateRlCheckBox (map service, string rl) ``{
	list start = service["start"]:[];
	boolean old_notify = UI::QueryWidget (`id (rl), `Notify);
	UI::ChangeWidget (`id (rl), `Notify, false);
	UI::ChangeWidget (`id (rl), `Value, contains (start, rl));
	UI::ChangeWidget (`id (rl), `Notify, old_notify);
    }
    /**
     * Changes values of runlevel checkboxes.
     * @param service @ref service
     */
    global define void updateRlCheckBoxes (map service) ``{
	foreach (`i, RunlevelEd::runlevels, ``{
	    updateRlCheckBox (service, i);
	});
    }
    /**
     * Sets runlevel columns in the table.
     * @param service_name which line
     * @param service @ref service
     * @param rls which columns to update, nil == all
     */
    global define void updateRlColumns (string service_name, map service,
					list(string) rls) ``{
	list start = service["start"]:[];
	if (rls == nil)
	{
	    rls = RunlevelEd::runlevels;
	}
	foreach (string rl, rls, ``{
	    UI::ChangeWidget (`id (`table),
			      `Item (service_name, runlevel2tableindex[rl]:0),
			      contains (start, rl) ? rl : " ");
	});
    }
    /**
     * Helper function for fetching service status in run-time.
     * @param service_name which line
     * @param started status or -1 (unknown yet)
     */
    global define void updateStatusColumn (string service_name,
					   integer started) ``{
	UI::ChangeWidget (`id (`table), `Item (service_name, 1),
			  StartedText (started));
    }
    /**
     * Reads data from checkboxes and updates service
     * and RunlevelEd::services maps.
     * @param service_name which service
     * @param service @ref service
     * @return @ref service
     */
    global define map queryRlCheckBoxes (string service_name, map service) ``{
	list start_in = [];
	foreach (`i, RunlevelEd::runlevels, ``{
	    if (UI::QueryWidget (`id (i), `Value))
	    {
		start_in = add (start_in, i);
	    }
	});
	if (service["start"]:[] != start_in)
	{
	    service = union (service, $[
				 "start": start_in,
				 "dirty": true
				 ]);
	    RunlevelEd::services = add (RunlevelEd::services,
				      service_name, service);
	}
	return service;
    }

    /**
     * Get help text for rcscript start|stop command exit value.
     * @param exit exit value
     * @return string help text
     */
    global define string getActionReturnHelp (integer exit) ``{
	// Init script non-status-command return codes
	// http://www.linuxbase.org/spec/gLSB/gLSB/iniscrptact.html
	return lookup (
	    $[
		// status code.
		// this is used only in case someone called this function
		// with bad input
		0: _("Success."),
		/* 1: handled as default below */
		// status code.
		2: _("Invalid or excess arguments."),
		// status code.
		3: _("Unimplemented feature."),
		// status code.
		4: _("User had insufficient privileges."),
		// status code.
		5: _("Program is not installed."),
		// status code.
		6: _("Program is not configured."),
		// status code.
		7: _("Program is not running."),
		// status code.
		], exit, _("Unspecified error."));
    }
    /**
     * Get help text for rcscript status return value
     * according to LSB.
     * @param exit exit value
     * @return string help text
     */
    global define string getStatusReturnHelp (integer exit) ``{
	// Init script "status" command return codes
	// http://www.linuxbase.org/spec/gLSB/gLSB/iniscrptact.html
	return lookup (
	    $[
		// status code.
		0: _("Program is running."),
		// status code.
		1: _("Program is dead and /var/run pid file exists."),
		// status code.
		2: _("Program is dead and /var/lock lock file exists."),
		// status code.
		3: _("Program is stopped."),
		// status code.
		4: _("Program or service status is unknown."),
		// status code.
		], exit, _("Unspecified error."));
    }
    /**
     * help text for progress
     * @return help text
     */
    global define string getHelpProgress () ``{
	return
	    // help text
	    _("<P><BIG><B>Runlevel editor initialization</B></BIG><BR>
Please wait.</P>")
	    +
	    // warning
	    _("<p><b>Note!</b> The runlevel editor is an expert tool. Please only change settings if
 you know what you are doing; otherwise your system might not function properly afterwards.</p>")
	    ;
    }

    /**
     * help text for main dialog
     * @return help text
     */
    global define string getHelpMain () ``{
	return
	    // help text
	    _("<p><b>With the runlevel editor you can set the default runlevel and specify in detail
 which system services you want to be started in which runlevel.</b></p>")
	    +
	    // warning
	    _("<p><b>Warning!</b> The runlevel editor is an expert tool. Only change settings if you know
 what you are doing, otherwise your system might not function properly afterwards.</p>")
	    +
	    // The change does not occur immediately. After a reboot the system boots into the specified runlevel.
	    _("<p>Changes to the <b>default runlevel</b> will take effect next time you boot your computer.</p>")
	    +
	    // help text
	    _("<p>To change the behavior of runlevels and system services in detail, click <b>Runlevel properties</b>.
 You will also be able to start and stop services directly.</p>
")
	    ;
    }

    /**
     * help text services dialog
     * @return help text
     */
    global define string getHelpComplex () ``{
	// help text
	return
	    // help text
	    _("<p>Assign system services to runlevels by selecting the list entry of the respective service then
checking or unchecking the <b>check boxes B-S</b> for the runlevel.</p>
")
	    +
	    // help text
	    _("<p><b>Start/Stop/Refresh:</b> Use this to start or stop services individually.</p>")
	    +
	    // help text
	    _("<P><B>Set and Reset:</B>
Select runlevels in which to run the currently selected service.<ul>
<li><b>Enable the service:</b> Activates the service in the standard runlevels.</li>
<li><b>Disable the service:</b> Deactivates service.</li>
<li><b>Enable all services:</b> Activates all services in their standard runlevels.</li>
</ul></p>
")
	    ;
    }
    /**
     * Help text for auto-complex-screen
     * @return help text
     */
    global define string getHelpAuto () ``{
	return
	    // help text
	    _("<p><b>Prepare data for autoinstallation.</b></p>")
	    +
	    // help text
	    _("<p>Change the services to requested state. Only services marked as changed will really be changed in the target system.</p>")
	    +
	    // help text
	    _("<p>If you made a mistake and want to undo the change, press <b>Clear</b> or <b>Clear all</b>.</p>")
	    ;
    }

    /**
     * Ask if really abort. Uses boolean changed_settings. Sets boolean do_abort_now.
     * @return boolean true if user really wants to abort
     */
    global define boolean reallyAbort ()``{
	if (do_abort_now || !RunlevelEd::isDirty ())
	    {
		do_abort_now = true;
		return true;
	    }
	do_abort_now = UI::ReallyAbortPopup (true);
	return do_abort_now;
    }

    /**
     * @param started status or -1 (unknown yet)
     * @return "Yes", "No" or "???"
     */
    global define string StartedText (integer started) ``{
	return (0 == started ?
		// is the service started?
		_("Yes") :
		(started > 0 ?
		 // is the service started?
		 _("No") :
		 // is the service started?
		 // ???: we do not know yet what is the service state
		 _("???")));
    }
    /**
     * Create table items from services.
     * @return list List of items for table.
     */
    global define list servicesToTable () ``{
	list items = [];
	boolean first = true;
	foreach (`k, `v, RunlevelEd::services, ``{
	    if (first)
	    {
		first = false;
		current_service = k;
	    }
	    term item = `item (`id (k), k);
	    integer started = lookup (v, "started", -1);
	    item = add (item, StartedText (started));
	    list rl = lookup (v, "start", []);
	    foreach (`i, RunlevelEd::runlevels, ``{
		item = add (item, (contains (rl, i)? i : " "));
	    });
	    item = add (item, lookup (v, "description", ""));
	    items = add (items, item);
	});
	return items;
    }

    /**
     * For each service, determines its status and calls a supplied function.
     * @param func function to call
     * @see updateStatusInTable
     */
    global define void serviceStatusIterator (term func) ``{
	if (!fetching_service_status)
	{
	    return;
	}
	if (fetching_service_index >= size (RunlevelEd::service_list))
	{
	    fetching_service_status = false;
	    return;
	}
	string service_name = RunlevelEd::service_list[fetching_service_index]:"";
	fetching_service_index = fetching_service_index + 1;
	map service = RunlevelEd::services[service_name]:$[];
	integer started = Runlevel::RunInitScript (service_name, "status");

	RunlevelEd::services = add (RunlevelEd::services, service_name,
				  add (service, "started", started));
	if (func != nil)
	{
	    func = add (func, service_name);
	    func = add (func, service);
	    func = add (func, started);
	    eval (func);
	}
    }

    /**
     * Dialog that allows changing of default runlevel.
     * @return symbol for wizard sequencer
     */
    global define symbol runMain () ``{
	Wizard::SetScreenShotName ("runlevel-1-main");

	term contents = `VBox (
	    `VStretch (),
	    // label in dialog
	    `HBox (
		`HSpacing (1),
		`Frame (
		    // frame label
		    _("Default runlevel"),
		    `HBox (
			`HSpacing (2),
			`VBox (
			    `VSpacing (1),
			    // label
			    `Label (`opt (`hstretch),_("Current runlevel is:")),
			    `Label (`opt (`outputField, `hstretch), getRunlevelDescr (RunlevelEd::current)),
			    `VSpacing (1),
			    // combo box label
			    `ComboBox (`id (`default), `opt (`hstretch), _("&Set default runlevel after booting to:"), getDefaultPicker ()),
			    `VSpacing (1)
			    ),
			`HSpacing (2)
			)
		    ),
		`HSpacing (1)
		),
	    `VStretch (),
	    // pushbutton
	    `PushButton (`id (`edit), _("Runlevel &properties...")),
	    `VStretch ()
	    );
	// window label
	Wizard::SetContents (_("Runlevel editor: default runlevel"), contents, getHelpMain (), true, true);
	Wizard::ReplaceNextButton (`PushButton (`id (`next), FinishButtonLabel()));

	any ret = nil;
	while (true)
	{
	    if (fetching_service_status)
	    {
		ret = UI::PollInput ();
		UI::NormalCursor ();
		if (nil == ret)
		{
		    serviceStatusIterator (nil);
		    continue ;
		}
		UI::BusyCursor ();
	    }
	    else
	    {
		ret = UI::UserInput ();
	    }
	    if (ret == `cancel)
	    {
		ret = `abort;
	    }

	    // we may read this anyway...
	    RunlevelEd::default = UI::QueryWidget (`id (`default), `Value);
	    if (`back == ret || `abort == ret)
	    {
		if (!reallyAbort ())
		{
		    continue;
		}
	    }
	    else if (`next == ret)
	    {
		if (RunlevelEd::isDirty ())
		{
		    // yes-no popup
		    if (!UI::YesNoPopup (_("Changes made to the runlevels \nwill now be saved.")))
		    {
			continue;
		    }
		}
	    }
	    break;
	}

	Wizard::RestoreScreenShotName ();
	return ret;
    }

    /**
     * Returns textual runlevel description. Descriptions are hard-coded in ycp script.
     * @param rl Runlevel to check.
     * @return string Description.
     */
    global define string getRunlevelDescr (string rl) ``{
	return lookup ($[
	    // descriptions of runlevels. there must be number: description
	    // number is runlevel name
	    "0" : _("0: System halt"),
	    "1" : _("1: Single user mode"),
	    "2" : _("2: Local multiuser without remote network"),
	    "3" : _("3: Full multiuser with network"),
	    "4" : _("4: User defined"),
	    "5" : _("5: Full multiuser with network and xdm"),
	    "6" : _("6: System reboot"),
	    ], rl, rl);
    }

    /**
     * Returns items for default runlevel combo box.
     * (Excludes 0, 6, S and B)
     * @return list List of items. Default is selected.
     */
    global define list getDefaultPicker () ``{
	list items = [];
	foreach (`i, RunlevelEd::runlevels, ``{
	    if ("0" != i && "6" != i && "S" != i && "B" != i)
	    {
		items = add (items, `item (`id (i), getRunlevelDescr (i), i == RunlevelEd::default));
	    }
	});
	return items;
    }

    /**
     * @param	rll	a list of runlevels or nil, meaning "all"
     * @return		"in [these] runlevels" (translated)
     */
    global define string getInRunlevels (list(string) rll) ``{
	if (rll == nil)
	{
	    // translators: substituted into a message like
	    // "To enable/disable foo IN ALL RUNLEVELS, this must be done..."
	    // (do not include the trailing comma here)
	    return _("in all runlevels");
	}
	else
	{
	    string s = mergestring (rll, ", ");
	    // translators: substituted into a message like
	    // "To enable/disable foo IN RUNLEVELS 3, 5, this must be done..."
	    // (do not include the trailing comma here)
	    return sformat (_("in runlevel %1", "in runlevels %1",
			      size (rll)), s);
	}
    }
    /**
     * Disable the service. Changes global services.
     * @param service_name name of the service.
     */
    global define void setServiceDisable (string service_name) ``{
	map service = lookup (RunlevelEd::services, service_name, $[]);
	RunlevelEd::services = add (RunlevelEd::services, service_name,
			union (service,
			       $[
				   "start": [],
				   "dirty": true,
				   ]));
    }
    /**
     * Set service to its default state upon installation.
     * Changes global services.
     * @param service_name Name of service to process.
     */
    global define void setServiceToDefault (string service_name) ``{
	map service = lookup (RunlevelEd::services, service_name, $[]);
	RunlevelEd::services = add (RunlevelEd::services, service_name,
			union (service,
			       $[
				   "start": lookup (service, "defstart", []),
				   "dirty": true,
				   ]));
    }

    /**
     * Converts a list to a map with values of true
     * @param l a list
     * @return a map
     */
    global define map tomap (list l) ``{
	return listmap (any i, l, ``( [i, true] ));
    }

    /**
     * @param m a map
     * @return keys of the map
     */
    global define list mapkeys (map m) ``{
	return maplist (any k, any v, m, ``( k ));
    }

    /**
     * Enable or disable a service in some runlevels.
     * Set the variables and update the ui (rl columns).
     * @param service_name	a service
     * @param rls	which runlevels, nil == disable in all
     * @param enable	enabling or disabling?
     */
    global define void SetService (string service_name,
				   list (string) rls, boolean enable) ``{
	map service = RunlevelEd::services[service_name]:$[];
	list(string) start_in = nil;
	if (rls == nil)
	{
	    start_in = [];
	}
	else
	{
	    map start = tomap (service["start"]:[]);
	    foreach (string rl, rls, ``{
		start = add (start, rl, enable);
	    });
	    start = filter (any k, boolean v, start, ``( v == true));
	    start_in = mapkeys (start);
	}

	if (service["start"]:[] != start_in)
	{
	    service = union (service, $[
				 "start": start_in,
				 "dirty": true
				 ]);
	    RunlevelEd::services = add (RunlevelEd::services,
				      service_name, service);

	    updateRlColumns (service_name, service, rls);
	}
    }

    /**
     * Check that all the services exist (in RunlevelEd::services).
     * If not, popup a list of the missing ones and ask whether
     * continue or not. Filter out the missing ones.
     * @param services a service list
     * @return [continue?, filtered list]
     */
    global define boolean CheckMissingServices (list(string) services) ``{
	list(string) missing = [];
	boolean ok = true;
	services = filter (string s, services, ``{
	    if (haskey (RunlevelEd::services, s))
	    {
		return true;
	    }
	    else
	    {
		missing = add (missing, s);
		return false;
	    }
	});
	if (size (missing) > 0)
	{
	    // missing services only occur when enabling
	    ok = UI::ContinueCancelPopup (
		sformat (
		    // continue-cancel popup when enabling a service
		    // %1 is a list of unsatisfied dependencies
		    _("These required services are missing:\n%1."),
		    formatLine (missing, 40)));
	}
	return [ok, services];
    }

    /**
     * Used for enabling/disabling a service and services depending on
     * it in a runlevel or a set of runlevels.
     * @param service_name	name of service
     * @param rls		in which run levels, nil == all
     * @param enable		enable/disable
     * @return success (may have been canceled because of dependencies)
     */
    global define boolean EnableDisableServiceDep (string service_name,
						   list(string) rls,
						   boolean enable) ``{
	y2debug (1, "RL: %1 %2 %3", service_name, rls, enable);
	boolean one = size (rls) == 1;

	list dep_s = RunlevelEd::ServiceDependencies (service_name, enable);
	y2debug ("DEP: %1", dep_s);
	if (one)
	{
	    string rl = rls[0]:"";
	    dep_s = RunlevelEd::FilterEnableDisable (dep_s, rl, enable);
	}
	else
	{
	    dep_s = RunlevelEd::FilterEnableDisableSet (dep_s, rls, enable);
	}
	y2debug ("DEP filtered: %1", dep_s);

	boolean doit = size (dep_s) == 0 ||
	    UI::ContinueCancelPopup (
		sformat (
		    enable ?
		    // translators: %2 is "in runlevel(s) 3, 5"
		    // or "in all runlevels"
		    _("To enable service %1 %2,
these services must be additionally enabled,
because it depends on them:
%3.")
		    :
		    // translators: %2 is "in runlevel(s) 3, 5"
		    // or "in all runlevels"
		    _("To disable service %1 %2,
these services must be additionally disabled,
because they depend on it:
%3."),
		    service_name, getInRunlevels (rls), formatLine (dep_s, 40)
		    )
		);
	// check for missing services
	if (doit)
	{
	    list r = CheckMissingServices (dep_s);
	    doit = r[0]:false;
	    dep_s = r[1]:[];
	}

	if (doit)
	{
	    foreach (string s, add (dep_s, service_name), ``{
		// set the variables and update the ui
		SetService (s, rls, enable);
	    });
	    service = RunlevelEd::services[current_service]:$[];
	}
	return doit;
    }

    /**
     * Used for starting/stopping a service and services depending on it.
     * Displays result popups.
     * @param service_name	name of service
     * @param enable		start/stop
     * @return success (may have been canceled because of dependencies)
     */
    global define boolean StartStopServiceDep (string service_name,
					       boolean enable) ``{
	y2debug (1, "RUN: %1 %2", service_name, enable);
	string command = enable? "start": "stop";

	list dep_s = RunlevelEd::ServiceDependencies (service_name, enable);
	y2debug ("DEP: %1", dep_s);
	dep_s = RunlevelEd::FilterStartStop (dep_s, enable);
	y2debug ("DEP filtered: %1", dep_s);

	boolean doit = size (dep_s) == 0 ||
	    UI::ContinueCancelPopup (
		sformat (
		    enable ?
		    // continue-cancel popup
		    _("To start service %1,
these services must be additionally started,
because it depends on them:
%2.")
		    :
		    // continue-cancel popup
		    _("To stop service %1,
these services must be additionally stopped,
because they depend on it:
%2."),
		    service_name, formatLine (dep_s, 40)
		    )
		);
	// check for missing services
	if (doit)
	{
	    list r = CheckMissingServices (dep_s);
	    doit = r[0]:false;
	    dep_s = r[1]:[];
	}

	string rich_message = "";
	if (doit)
	{
	    // iterate dep_s, not including service_name
	    // because we will ask "continue?" on error
	    foreach (string s, dep_s, ``{
		list ret = startStopService (s, command);

		rich_message = rich_message + ret[1]:"";
		integer exit = ret[0]:-1;
		if (exit != 0)
		{
		    doit = LongContinueCancelHeadlinePopup (
			// popup heading
			_("An error has occurred."), `RichText (rich_message),
			70, 10);
		    // don't show what we've already seen
		    rich_message = "";
		    if (!doit)
		    {
			return; // break(foreach)
		    }
		}
	    });
	}
	if (doit)
	{
	    // only for service_name
	    list ret = startStopService (service_name, command);

	    rich_message = rich_message + ret[1]:"";
	    UI::LongTextPopup ("", `RichText(rich_message), 70, 5);
	    service = RunlevelEd::services[current_service]:$[];
	}
	return doit;
    }

    /**
     * Like UI::LongTextPopup
     * @param headline	a headline
     * @param richtext	`RichText(_("&lt;p>foo...&lt;/p>"))
     * @param hdim	popup width
     * @param vdim	popup height
     * @return continue?
     */
    global define boolean LongContinueCancelHeadlinePopup (
	string headline, term richtext, integer hdim, integer vdim) ``{

	UI::OpenDialog (
	    `opt (`decorated),
	    `HBox (
		`VSpacing (vdim),
		`VBox (
		    `HSpacing (hdim),
		    `Left (`Heading (headline)),
		    `VSpacing (0.2),
		    richtext,	// scrolled text
		    `HBox (
			`PushButton (
			    `id (`continue),
			    `opt (`default),
			    ContinueButtonLabel ()),
			`PushButton (
			    `id (`cancel),
			    CancelButtonLabel ())
			)
		    )
		)
	    );

	UI::SetFocus (`id (`continue));

	boolean ret = UI::UserInput() == `continue;
	UI::CloseDialog();
	return ret;
    }

    /**
     * Starts/stops/checks status of a service
     * @param service_name service to start/stop
     * @param command "start" or "stop" or "status"
     * @return [integer exit_status, string rich_message]
     */
    global define list startStopService (string service_name,
					 string command) ``{
	UI::OpenDialog (`Label (service_name + " " + command));
	map out = Runlevel::RunInitScriptOutput (service_name, command);
	UI::CloseDialog ();

	integer exit = lookup (out, "exit", -1);
	string rich_message = sformat (
	    // %1 service, %2 command,
	    // %3 exit status, %4 status description, %5 stdout
	    _("<p><b>/etc/init.d/%1 %2</b> returned %3 (%4)<br>%5</p>"),
	    service_name, command, exit,
	    (command == "status" ?
	     getStatusReturnHelp (exit) :
	     getActionReturnHelp (exit)),
	    sformat ("<pre>%1</pre>", out["stdout"]:"")
	    );
	// succesful stop => status: program not running
	integer started = (exit == 0 && command == "stop")? 3: exit;
	// normally "started" has the exit code of "status",
	// and we may be adding output of a different command
	// but it is only tested against zero anyway
	map service = RunlevelEd::services[service_name]:$[];
	service = add (service, "started", started);
	RunlevelEd::services = add (RunlevelEd::services, service_name, service);
	updateStatusColumn (service_name, service["started"]:-1);
//	UI::MessagePopup (message);
	return [exit, rich_message];
    }

    /**
     * Prints list items into a string, separating them by commas
     * and when line exceeds len characters, it does line break (\n).
     * It adds 5 spaces before each line.
     * Do not expect reasonable results if you set len < 0.
     * @param l list of strings
     * @param len minimal length of line
     * @return string formated string
     */
    global define string formatLine (list(string) l, integer len) ``{
	string s = "";
	string line = "     ";
	string add_sep = "";
	string line_sep = "";
	foreach (string i, l, ``{
	    if (size (line) > len)
		{
		    s = s + line_sep + line;
		    line_sep = ",\n";
		    line = "     ";
		}
	    else
		{
		    line = line + add_sep;
		}
	    line = line + i;
	    add_sep = ", ";
	});
	if (size (line) > 0)
	    {
		s = s + line_sep + line;
	    }
	return s;
    }

    /**
     * Checks what services should run in this runlevel and do not run
     * or what services run but should not run.
     * @return string overview text
     */
    global define string overviewText () ``{
	list should_not_run = [];
	list should_run = [];
	foreach (`k, `v, RunlevelEd::services, ``{
	    if (RunlevelEd::StartContainsImplicitly  (v["start"]:[],
						      RunlevelEd::current))
		{   // it should run
		    if (0 != lookup (v, "started", ""))
			{
			    should_run = add (should_run, k);
			}
		}
	    else
		{
		    if (0 == lookup (v, "started", ""))
			{
			    should_not_run = add (should_not_run, k);
			}
		}
	});
	string s = "";
	if (size (should_run) + size (should_not_run) > 0)
	    {
		// message label
		s = s + "\n\n"/* + _("Overview") + "\n\n"*/;
		if (size (should_not_run) > 0)
		    {
			// list of services will follow
			s = s + _("Following services run in current\nrunlevel although they should not:");
			s = s + "\n" + formatLine (should_not_run, 35) + "\n\n";
		    }

		if (size (should_run) > 0)
		    {
			// list of services will follow
			s = s + _("Following services do not run in current\nrunlevel although they should:");
			s = s + "\n" + formatLine (should_run, 35) + "\n\n";
		    }
	    }
	return s;
    }

    /**
     * Main dialog for changing services.
     * @return symbol for wizard sequencer
     */
    global define symbol allInOne () ``{
	Wizard::SetScreenShotName ("runlevel-2-services");

	// currently selected service we are working with
	map service = $[];

	/**
	 * Local function to allInOne.
	 * Changes values of runlevel checkboxes.
	 * Get the status if not known yet.
	 */
	define void changeService1 () ``{
	    if (lookup (service, "started", -1) < 0)
	    {
		integer started = Runlevel::RunInitScript (current_service,
							   "status");
		service = add (service, "started", started);
		RunlevelEd::services = add (RunlevelEd::services, current_service, service);
		updateStatusColumn (current_service, started);
	    }
	    updateRlCheckBoxes (service);
	}

	/**
	 * Helper function for fetching service status in run-time.
	 * @param service_name which line
	 * @param service @ref service
	 * @param started status or -1 (unknown yet)
	 */
	define void updateStatusInTable (string service_name, map service,
					 integer started) ``{
	    // just translate the arguments. the callback is generic
	    // because of the future simple UI, bug #13789
	    updateStatusColumn (service_name, started);
	}

	// --- body of allInOne ---

	term header = `header (
	    // table header
	    _("Service"),
	    // table header. is a service running?
	    _("Running"));
	foreach (`i, RunlevelEd::runlevels, ``{
//	    header = add (header, `Center (" " + i + " "));
	    header = add (header, `Center (i));
	});
	// headers in table
	header = add (header, _("Description"));
	term contents = `VBox (
	    `VSpacing (0.5),
	    `HBox (
		// preserve 2 spaces at the end.
		`Label (_("Current runlevel:  ")),
		`Label (`opt (`outputField, `hstretch), getRunlevelDescr (RunlevelEd::current))
		),
	    `VSpacing (0.5),
	    `Table (`id (`table), `opt (`notify, `immediate),
		    header,
		    servicesToTable ()
		),
	    `VBox (
		// label above checkboxes
		`Label (`id (`service_label), `opt (`hstretch), _("Service will be started in following runlevels:")),
		getRlCheckBoxes ()
		),
	    `HBox (
		// menubutton label
		`MenuButton (_("S&tart/Stop/Refresh"), [
				 // menu item
		    `item (`id (`start), _("&Start now ...")),
				 // menu item
		    `item (`id (`stop), _("S&top now ...")),
				 // menu item
		    `item (`id (`status), _("&Refresh status ...")),
		    ]),
		`HStretch (),
		`ReplacePoint (
		    `id (`menubutton),
		    // menubutton label
		    `MenuButton (_("Set/&Reset"), [
				 // menu item
			`item (`id (`to_enable), _("&Enable the service")),
				 // menu item
			`item (`id (`to_disable), _("&Disable the service")),
				 // menu item
			`item (`id (`to_all_enable), _("Enable &all services")),
			])
		    )
		)
	    );
	// dialog caption.
	Wizard::SetContents (_("Runlevel editor: details"), contents, getHelpComplex (), true, true);
	UI::ChangeWidget (`id (`table), `CurrentItem, current_service);
	service = lookup (RunlevelEd::services, current_service, $[]);
	changeService1 ();
	any ret = nil;
	while (`next != ret && `back != ret && `abort != ret)
	    {
		if (fetching_service_status)
		{
		    ret = UI::PollInput ();
		    UI::NormalCursor ();
		    if (nil == ret)
		    {
			serviceStatusIterator (``(updateStatusInTable ()));
			continue;
		    }
		    UI::BusyCursor ();
		}
		else
		{
		    ret = UI::UserInput ();
		}
		if (ret == `cancel)
		{
		    ret = `abort;
		}

		if (`abort == ret)
		{
		    if (!reallyAbort ())
		    {
			ret = nil;
			continue;
		    }
		}
		else if (`next == ret)
		{
		    if (RunlevelEd::CheckXInetd () && !UI::YesNoHeadlinePopup (
			    // yes-no popup headline
				_("Both inetd and xinetd are selected!"),
			    // yes-no popup
				_("Services inetd and xinetd need extra configuration
to run simultaneously. Do you really want to run
both of them?")))
		    {
			ret = nil;
			continue;
		    }

		    // TODO: check dependencies of all services? (on demand?)
		    // string nfs_adj = RunlevelEd::CheckPortmap ();
		    // ...

		    if (RunlevelEd::isDirty ())
		    {
			// yes-no popup
			if (!UI::YesNoPopup (_("Now the changes to runlevels \nwill be saved.")))
			{
			    ret = nil;
			    continue;
			}
		    }
		    break;
		}
		else if (`table == ret)
		{
		    current_service = UI::QueryWidget (`id (`table), `CurrentItem);
		    service = RunlevelEd::services[current_service]:$[];
		    changeService1 ();
		}
		else if (nil != ret && is (ret, string))
		{
		    // checkbox pressed
		    // - enable/disable current_service in one runlevel
		    boolean enable = UI::QueryWidget (`id (ret), `Value);
		    list(string) rls = [ret];
		    if (!EnableDisableServiceDep (current_service, [ret], enable))
		    {
			// restore the check box
			updateRlCheckBox (service, ret);
		    }
		}
		else if (`to_enable == ret)
		{
		    current_service = UI::QueryWidget (`id (`table), `CurrentItem);
		    list(string) default = RunlevelEd::services[current_service, "defstart"]:[];
		    EnableDisableServiceDep (current_service, default, true);
		    service = RunlevelEd::services[current_service]:$[];
		    changeService1 ();
		}
		else if (`to_disable == ret)
		{
		    current_service = UI::QueryWidget (`id (`table), `CurrentItem);
		    EnableDisableServiceDep (current_service, nil, false);
		    service = RunlevelEd::services[current_service]:$[];
		    changeService1 ();
		}
		else if (`to_all_enable == ret)
		{
		    // yes-no popup
		    if (UI::YesNoPopup (_("Really enable all services?")))
		    {
			foreach (`k, `v, RunlevelEd::services, ``{
			    setServiceToDefault (k);
			});
			UI::ChangeWidget (`id (`table), `Items, servicesToTable ());
			// message popup
			UI::MessagePopup (_("All services restored to their original\nstatus upon initial installation."));
		    }
		}
		else if (`start == ret || `stop == ret)
		{
		    boolean really = true;
		    if (`stop == ret && "xdm" == current_service)
		    {
			// yes-no popup. the user wants to stop xdm
			if (!UI::YesNoPopup ( _("This may kill your X session.\n\nProceed?")))
			{
			    really = false;
			}
		    }
		    if (really)
		    {
			StartStopServiceDep (current_service, ret == `start);
		    }
		}
		else if (`status == ret)
		{
		    // similar to startStopService but there will be changes
		    // when dependencies are checked

		    //TODO: find a place for it
		    //UI::MessagePopup (overviewText ());
		    list r = startStopService (current_service, "status");
		    UI::LongTextPopup ("", `RichText(r[1]:""), 70, 5);
		}
	    }

	Wizard::RestoreScreenShotName ();
	return ret;
    }
    /**
     * Add service by hand.
     * @return new service name (already added to RunlevelEd::services) or ""
     */
    global define string addService () ``{
	UI::OpenDialog (`VBox (
			    // dialog heading
		    `Heading (`opt (`hstretch), _("Add service")),
		    `VSpacing (1),
		    // text entry
		    `TextEntry (`id (`name), _("Service &name")),
		    // label
		    `Label (`opt (`hstretch), _("Starts in these runlevels by default:")),
		    getRlCheckBoxes (),
		    `VSpacing (1),
		    // text entry
		    `TextEntry (`id (`des), _("&Description (optional)"), ""),
		    `VSpacing (1),
		    `HBox (`PushButton (`id (`ok), UI::OKButtonLabel ()), `PushButton (`id (`cancel), UI::CancelButtonLabel ()))
		    ));
	symbol ret = nil; // TODO any (symbol|string)
	string name = "";
	boolean r = false;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (`ok == ret)
	    {
		name = UI::QueryWidget (`id (`name), `Value);
		if (nil == name || "" == name || haskey (RunlevelEd::services, name))
		{
		    // message popup
		    UI::MessagePopup (_("Invalid service name. You did not specify service
name or the name specified is already in use."));
		    continue;
		}
		list def = [];
		foreach (`i, RunlevelEd::runlevels, ``{
		    if (UI::QueryWidget (`id (i), `Value))
		    {
			def = add (def, i);
		    }
		});
		map m = $[
		    "dirty" : true,
		    "defstart" : def,
		    "start" : def,
		    "description" : UI::QueryWidget (`id (`des), `Value)
		    ];
		RunlevelEd::services = add (RunlevelEd::services, name, m);
		break;
	    }
	    if (`cancel == ret)
	    {
		name = "";
		break;
	    }
	}
	UI::CloseDialog ();
	return name;
    }
    /**
     * Main dialog for changing services.
     * @return symbol for wizard sequencer
     */
    global define symbol runAutoDialog () ``{
	// currently selected service we are working with
	map service = $[];

	string CheckMark = UI::Glyph (`CheckMark);
	/**
	 * Create table items from services.
	 * @return list List of items for table.
	 */
	define list servicesToTable2 () ``{
	    list items = [];
	    boolean first = true;
	    foreach (`k, `v, RunlevelEd::services, ``{
		if (first)
		{
		    first = false;
		    current_service = k;
		}
		term item = `item (`id (k), k);

		item = add (item, v["dirty"]:false ? CheckMark : " ");
		list rl = lookup (v, "start", []);
		foreach (`i, RunlevelEd::runlevels, ``{
		    item = add (item, (contains (rl, i)? i : " "));
		});
		item = add (item, lookup (v, "description", ""));
		items = add (items, item);
	    });
	    return items;
	}

	/**
	 * Sets columns 0-S (runlevels) in table so they are synchronized with checkboxes.
	 */
	define void refreshTableLine2 () ``{
	    updateRlColumns (current_service, service);
	    UI::ChangeWidget (`id (`table), `Item (current_service, 1),
			      service["dirty"]:false ? CheckMark : " ");
	}

	// headers in table
	term header = `header (
	    // table header
	    _("Service"),
	    // table header. has the service state changed?
	    _("Changed"));
	foreach (`i, RunlevelEd::runlevels, ``{
//	    header = add (header, `Center (" " + i + " "));
	    header = add (header, `Center (i));
	});
	// headers in table
	header = add (header, _("Description"));
	term contents = `VBox (
	    `VSpacing (0.5),
	    `Table (`id (`table), `opt (`notify, `immediate),
		    header,
		    servicesToTable2 ()
		),
	    `VBox (
		// label above checkboxed
		`Label (`id (`service_label), `opt (`hstretch), _("Service will be started in following runlevels:")),
		getRlCheckBoxes ()
		),
	    `HBox (
		// button label
		`PushButton (`id (`add), _("A&dd")),
		`HStretch (),
		// button label
		`PushButton (`id (`clear), _("&Clear")),
		// button label
		`PushButton (`id (`clear_all), _("Clea&r All")),
		// button label
		`PushButton (`id (`default), _("D&efault"))
		)
	    );
	// dialog caption.
	Wizard::SetContents (_("Runlevel editor: details"), contents, getHelpAuto (), true, true);
	UI::ChangeWidget (`id (`table), `CurrentItem, current_service);
	service = lookup (RunlevelEd::services, current_service, $[]);
	updateRlCheckBoxes (service);
	any ret = nil;
	while (nil != UI::PollInput ()) {}
	while (`next != ret && `back != ret && `abort != ret)
	    {
		ret = UI::UserInput ();
		if (ret == `cancel)
		{
		    ret = `abort;
		}

		if (`abort == ret)
		{
		    if (!reallyAbort ())
		    {
			ret = nil;
			continue;
		    }
		}
		else if (`next == ret)
		{
		    if (RunlevelEd::CheckXInetd () && !UI::YesNoHeadlinePopup (
			    // yes-no popup headline
				_("Both inetd and xinetd are selected!"),
			    // yes-no popup
				_("Services inetd and xinetd need extra configuration
to run simultaneously. Do you really want to run
both of them?")))
		    {
			ret = nil;
			continue;
		    }
		    string nfs_adj = RunlevelEd::CheckPortmap ();
		    if (nil != nfs_adj)
		    {
			UI::ChangeWidget (`id (`table), `CurrentItem, "portmap");
			current_service = "portmap";
			service = lookup (RunlevelEd::services, "portmap", $[]);
			updateRlCheckBoxes (service);
			while (nil != UI::PollInput ()) {}
			// yes-no popup
			if (!UI::YesNoPopup (sformat (_("Service portmap, which is required by
%1, is disabled. Enable
portmap if you want to run %1.

Leave portmap
disabled?\n"), nfs_adj)))
			{
			    ret = nil;
			    continue;
			}
		    }
		    break;
		}
		else if (`add == ret)
		{
		    string name = addService ();
		    if ("" != name)
		    {
			UI::ChangeWidget (`id (`table), `Items, servicesToTable2 ());
			UI::ChangeWidget (`id (`table), `CurrentItem, name);
			// qt and curses behave differently:
			// one of them sends notification after changewidget
			// and the other does not.
			// So eat it.
			while (nil != UI::PollInput ()) {}
			ret = `table;
		    }
		}
		else if (`default == ret)
		{
		    setServiceToDefault (current_service);
		    service = RunlevelEd::services[current_service]:$[];
		    refreshTableLine2 ();
		    ret = `table;
		}
		else if (`clear == ret)
		{
		    // re-read from SCR
		    service = Runlevel::ServiceInfo (current_service);
		    RunlevelEd::services = add (RunlevelEd::services, current_service, service);
		    refreshTableLine2 ();
		    ret = `table;
		}
		else if (`clear_all == ret)
		{
		    RunlevelEd::ClearServices ();
		    UI::ChangeWidget (`id (`table), `Items, servicesToTable2 ());
		    ret = `table;
		}
		else if (nil != ret && is (ret, string))
		{
		    // checkbox pressed
		    // checked or unchecked?
		    string checked = ((UI::QueryWidget (`id (ret), `Value)) ? ret : " ");
		    service = queryRlCheckBoxes (current_service, service);
		    UI::ChangeWidget (`id (`table), `Item (current_service, lookup (runlevel2tableindex, ret, 0)), checked);
		    UI::ChangeWidget (`id (`table), `Item (current_service, 1), CheckMark);
		}

		// not a part of the else-if chain above!
		if (`table == ret)
		{
		    current_service = UI::QueryWidget (`id (`table), `CurrentItem);
		    service = lookup (RunlevelEd::services, current_service, $[]);
		    updateRlCheckBoxes (service);
		    while (nil != UI::PollInput ()) {}
		}
	    }
	return ret;
    }
}
