/**
 * File:
 *   ui.ycp
 *
 * Module:
 *   Runlevel Editor
 *
 * Summary:
 *   Runlevel Editor user interface.
 *
 * Authors:
 *   Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 *
 * Runlevel editor user interface functions.
 */
{
    textdomain "runlevel";

    include "ui/common_popups.ycp";

    global define getHelpProgress () ``{
        return
            // help text
            _("<P><BIG><B>Runlevel editor intialization</B></BIG><BR>
Please wait.</P>")
            +
            // warning
            _("<P><B>Note!</B> The runlevel editor is an expert tool. If you change settings in the next dialogs, your system may be out of order.</P>")
            ;
    }

    global define getHelpMain () ``{
        return
            // help text
            _("<P><BIG><B>Change of default runlevel and detailed start/stop behaviour of system services.</B></BIG></P>")
            +
            // warning
            _("<P><B>Note!</B> The runlevel editor is an expert tool. If you change settings in the next dialogs, your system may be out of order.</P>")
            +
            // The change does not occure immediately. After reboot system boots into given runlevel.
            _("<P>The change of <B>default runlevel after booting</B> will be executed after a reboot of your computer.</P>")
            +
            _("<P>The button <B>Edit runlevel details...</B>
 will open a new dialog with full overview about
 the available services and their actual status
 with complete manipulation.</P>")
            ;
    }

    global define getHelpComplex () ``{
        // help text
        return
            // help text
            _("<P><BIG><B>Changing the default behaviour of all available services</B></BIG></P>")
            +
            _("<P><B>Checkboxes 0 to S:</B> Select runlevels in which to run currently selected service in.</P>")
            +
            _("<P><B>Menubutton Start/Stop/Refresh:</B> You can start or stop selected service. You can also query its state.</P>")
            +
            // help text
            _("<P><B>Menubutton Set/Reset:</B>
 Select runlevels you want to start currently selected service in.<ul>
<li><B>Reset to default</B><BR>restores services to their original status upon initial installation.</li>
<li><B>Reset all to default</B><BR>does the same for all services.</li>
<li><B>Enable the service</B><BR>Enables deactivated services and sets them to run in common runlevels.</li>
</ul></P>")
            ;
    }

    /**
     * Create table items from services.
     * @return list List of items for table.
     */
    global define servicesToTable () ``{
        list items = [];
        boolean first = true;
        foreach (`k, `v, services, ``{
            term item = `item (`id (k), k);
            // started?
            string started = lookup (v, "started");
            // we do not know what is the service state
            string started_text = _("???");
            if ("0" == started)
                {
                    // yes, service runs
                    started_text = _("Yes");
                }
            else if (nil != started)
                {
                    // no, service does not run
                    started_text = _("No");
                }
            item = add (item, started_text);
            list rl = lookup (v, "start", []);
            foreach (`i, runlevels, ``{
                item = add (item, (contains (rl, i)? i : " "));
//                item = add (item, (contains (rl, i)? UI (`Glyph (`CheckMark)) : "   "));
            });
            if (first)
                {
                    first = false;
                    current_service = k;
                }
            item = add (item, lookup (v, "description", ""));
            items = add (items, item);
        });
        return items;
    }

    global define runMain () ``{
        list levels = [];
        foreach (`i, runlevels, ``{
            if ("6" != i && "0" != i && "S" != i)
                {
                    levels = add (levels, `item (`id (i), i, default_runlevel == i));
                }
        });
        term contents = `VBox (
            `VStretch (),
            // label in dialog
            `HBox (
                `HSpacing (1),
                `Frame (
                    _("Changing default runlevel"),
                    `HBox (
                        `HSpacing (2),
                        `VBox (
                            `VSpacing (1),
                            `Label (`opt (`hstretch),_("Current runlevel is:")),
                            `Label (`opt (`outputField, `hstretch), getRunlevelDescr (current_runlevel)),
                            `VSpacing (1),
                            // combo box label
                            `ComboBox (`id (`default), `opt (`hstretch), _("&Set default runlevel after booting to:"), getDefaultPicker ()),
                            `VSpacing (1)
                            ),
                        `HSpacing (2)
                        )
                    ),
                `HSpacing (1)
                ),
            `VStretch (),
            // pushbutton
            `PushButton (`id (`edit), _("Edit &runlevel details...")),
            `VStretch ()
            );
        // window label
        UI (`SetWizardContents (_("Runlevel editor"), contents, getHelpMain (), true, true));
        UI (`ReplaceWizardNextButton (`PushButton (`id (`next), FinishButtonLabel())));
        return UI (``{
            return UserInput ();
        });
        do_abort_now = UI (`AnyQuestionPopup (
            // abort question: label
            _("Exit without saving"),
            // abort question: text
            _("All your changes in the setup procedure\nwill be lost if you continue."),
            // abort question: exit button
            _("&Exit without saving"),
            // abort question: go back button
            _("&Cancel abort"),
            `focus_yes
            ));
    }
    global define getRunlevelDescr (string rl) ``{
        return lookup ($[
            // descriptions of runlevels. there must be number: description
            // number is runlevel name
            "0" : _("0: System halt"),
            "1" : _("1: Single user mode"),
            "2" : _("2: Local multiuser without remote network"),
            "3" : _("3: Full multiuser with network"),
            "5" : _("5: Full multiuser with network and xdm"),
            "6" : _("6: System reboot"),
            ], rl, rl);
    }

    global define getDefaultPicker () ``{
        list items = [];
        foreach (`i, runlevels, ``{
            if ("0" != i && "6" != i && "S" != i)
                {
                    items = add (items, `item (`id (i), getRunlevelDescr (i), i == default_runlevel));
                }
        });
        return items;
    }

    /**
     * Is service disabled? Check "disabled" key which reflects whether service is disabled by some START_-like variable.
     * Otherwise it checks if it is disabled by unchecking all checkboxes...
     * @param service service to check
     * @return boolean true if service is disabled
     */
    global define isDisabled (map service) ``{
        if (lookup (service, "disabled", false))
            {
                return true;
            }
        if (0 == size (lookup (service, "start", [])) && lookup (service, "start") != lookup (service, "defstart"))
            {
                return true;
            }
        return false;
    }

    global define allInOne () ``{
        // currently selected service we are working with
        map service = $[];
        
        define changeService () ``{
            string st = lookup (service, "started");
            if (nil == st)
                {
                    st = serviceStatus (current_service);
                }
            list start = lookup (service, "start", []);
            foreach (`i, runlevels, ``{
                UI (`ChangeWidget (`id (i), `Value, false));
            });
            if (!isDisabled (service))
                {
                    foreach (`i, start, ``{
                        UI (`ChangeWidget (`id (i), `Value, true));
                    });
                }
            UI (`ChangeWidget (`id (`help), `Value, getHelpComplex ()));

            list menu_items = [
                // menu item
                `item (`id (`to_default), _("Reset to &default")),
                ];
            if (isDisabled (service))
                {
                    // menu item
                    menu_items = add (menu_items, `item (`id (`to_enable), _("&Enable the service")));
                }
            // menu item
            menu_items = add (menu_items, `item (`id (`to_all_default), _("Reset &all service to default")));
            // menu button label
            UI (`ReplaceWidget (`id (`menubutton), `MenuButton (_("Set/&Reset"), menu_items)));
        }
        define grabData () ``{
            list start_in = [];
            foreach (`i, runlevels, ``{
                if (UI (`QueryWidget (`id (i), `Value)))
                    {
                        start_in = add (start_in, i);
                    }
            });
            if (lookup (service, "start") != start_in)
                {
                    service = add (add (service, "start", start_in), "dirty", true);
                    services = add (services, current_service, service);
                }
        }
        // headers in table
        term header = `header (_("Service"), _("Running"));
        foreach (`i, runlevels, ``{
            header = add (header, `Center (i));
        });
        term rls = `HBox ();
        foreach (`i, runlevels, ``{
            rls = add (rls, `CheckBox (`id (i), `opt (`notify), "&" + i));
        });
        // headers in table
        header = add (header, _("Description"));
        term contents = `VBox (
            `VSpacing (0.5),
            `HBox (
                // preserve 2 spaces at the end.
                `Label (_("Current runlevel:  ")),
                `Label (`opt (`outputField, `hstretch), getRunlevelDescr (current_runlevel))
                ),
            `VSpacing (0.5),
            `Table (`id (`table), `opt (`notify, `immediate),
                    header,
                    servicesToTable ()
                ),
            `VBox (
                // label above checkboxed
                `Label (`id (`service_label), `opt (`hstretch), _("Service will be started in following runlevels:")),
                `HBox (rls)
                ),
            `HBox (
                // menubutton label
                `MenuButton (_("&Start/Stop now"), [
                    `item (`id (`start), _("&Start now ...")),
                    `item (`id (`stop), _("S&top now ...")),
                    `item (`id (`status), _("&Refresh status ...")),
                    ]),
                `HStretch (),
                `ReplacePoint (
                    `id (`menubutton),
                // menubutton label
                    `MenuButton (_("Set/&Reset"), [
                        `item (`id (`to_default), _("Reset to &default")),
                        `item (`id (`to_enable), _("&Enable the service")),
                        `item (`id (`to_all_default), _("Reset &all service to default")),
                        ])
                    )
                )
            );
        // dialog caption. 
        UI (`SetWizardContents (_("Runlevel editor"), contents, getHelpComplex (), true, true));
        // this ChangeWidget causes next UserInput will return `table FIXME does not work in ncurses
        UI (`ChangeWidget (`id (`table), `CurrentItem, current_service));
        any ret = nil;
        while (`next != ret && `back != ret && `abort != ret)
            {
                ret = UI (`UserInput ());
                if (`next == ret)
                    {
                        // save changes...
                        if (UI (`YesNoPopup (_("Now the changes to runlevels \nwill be saved."))))
                            {
                                UI (`MessagePopup (_("The new configuration \nwas stored successfully.")));
                                break;
                            }
                        ret = nil;
                    }
                if (`table == ret)
                    {
                        current_service = UI (`QueryWidget (`id (`table), `CurrentItem));
                        service = lookup (services, current_service);
                        changeService ();
                    }
                if (`to_default == ret)
                    {
                    }
                if (`to_enable == ret)
                    {
                    }
                if (`to_all_default == ret)
                    {
                        UI (`MessagePopup (_("Do you really want to restore all services to their\noriginal status upon initial installation?")));
                        UI (`MessagePopup (_("All services restored to their original\nstatus upon initial installation.")));
                    }
                if (`start == ret || `stop == ret || `status == ret)
                    {
                        string command = substring (sformat ("%1", ret), 1);
                        map out = runInitScript (current_service, command);
                        string message = "";
                        if (0 == lookup (out, "exit"))
                            {
                                // show an output
                                message = sformat (_("Output from '/etc/init.d/%1 %2':\n\n"),
                                                   current_service, command)
                                    + lookup (out, "stdout");
                            }
                        else
                            {
                                // show an exit code
                                message = sformat (_("'/etc/init.d/%1 %2' returned %3"),
                                                   current_service,command,
                                                   lookup (out, "exit")
                                                   );
                            }
                        UI (`MessagePopup (message));
                        // save ...
                        // FIXME: get state of current service (rcservice status)
                    }
                if (is (ret, string))
                    {
                        // checkbox pressed
                        // checked of unchecked?
//                        string checked = ((UI (`QueryWidget (`id (ret), `Value))) ? UI (`Glyph (`CheckMark)) : "   ");
                        string checked = ((UI (`QueryWidget (`id (ret), `Value))) ? ret : " ");
                        grabData ();
                        UI (`ChangeWidget (`id (`table), `Item (current_service, lookup (runlevel2tableindex, ret)), checked));
                    }
            }
        return ret;        
    }
}
