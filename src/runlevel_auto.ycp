/**
 * File:
 *   ui.ycp
 *
 * Module:
 *   Runlevel Editor
 *
 * Summary:
 *   Runlevel Editor data gathering.
 *
 * Authors:
 *   Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 *
 * See summary.
 */
{
    textdomain "runlevel";

    import "Runlevel";
    import "Progress";
    import "Wizard";

    include "wizard/sequencer.ycp";
    include "runlevel/ui.ycp";

    list args = Args ();
    map settings = select (Args (), 0, $[]);

    // you know what this means
    boolean do_abort_now = false;

    // We read service status when dialog with services is shown.
    // We read status for services taken from list of services (service_list)
    // and then update map services.
    integer fetching_service_index = 0;
    // when fetching_service_status becomes false, we stop fetching services
    boolean fetching_service_status = false;

    string current_service = "";

    // index into table column for each runlevel
    map runlevel2tableindex = $[];

    Wizard::CreateDialog ();
    Wizard::DisableAbortButton ();
    Wizard::RestoreHelp (getHelpProgress ());

    // We take data from underlying system
    Runlevel::Read ();
    Runlevel::Import (settings);
    // and patch them with supplied map

    integer id = 2;
    foreach (`i, Runlevel::runlevels, ``{
	runlevel2tableindex = add (runlevel2tableindex, i, id);
	id = id + 1;
    });

    //
    // maps for sequencer
    //
    map aliases = $[
	"start" :            ``(runMain ()),
	"complex" :          ``(runAutoDialog ()),
	];

    map main_sequence = $[
	"ws_start" : "start",
	"start" : $[ `next : `finish , `abort : `abort, `edit : "complex", ],
	"complex" : $[ `next : `finish, `abort : `abort ],
	];

    if (`finish == WizardSequencer (aliases, main_sequence))
    {
	settings = Runlevel::Export ();
    }
    UI::CloseDialog ();
    return settings;
}

