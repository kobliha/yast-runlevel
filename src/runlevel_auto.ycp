/**
 * File:
 *   ui.ycp
 *
 * Module:
 *   Runlevel Editor
 *
 * Summary:
 *   Runlevel Editor data gathering.
 *
 * Authors:
 *   Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 *
 * See summary.
 */
{
    textdomain "runlevel";

    import "RunlevelEd";
    import "Progress";
    import "Wizard";

    include "wizard/sequencer.ycp";
    include "runlevel/ui.ycp";

    list args = WFM::Args ();
    map settings = select (WFM::Args (), 0, $[]);

    // you know what this means
    boolean do_abort_now = false;

    // We read service status when dialog with services is shown.
    // We read status for services taken from list of services (service_list)
    // and then update map services.
    integer fetching_service_index = 0;
    // when fetching_service_status becomes false, we stop fetching services
    boolean fetching_service_status = false;

    string current_service = "";

    // index into table column for each runlevel
    map runlevel2tableindex = $[];


    // We take data from underlying system
    // RunlevelEd::Read ();

    RunlevelEd::Import (settings);
    // and patch them with supplied map
    y2milestone("Imported: (%1)", settings);


    integer id = 2;
    foreach (`i, RunlevelEd::runlevels, ``{
	runlevel2tableindex = add (runlevel2tableindex, i, id);
	id = id + 1;
    });

    //
    // maps for sequencer
    //
    map aliases = $[
	"start" :            ``(runMain ()),
	"complex" :          ``(runAutoDialog ()),
	];

    map main_sequence = $[
	"ws_start" : "start",
	"start" : $[ `next : `finish , `abort : `abort, `edit : "complex", ],
	"complex" : $[ `next : `finish, `abort : `abort ],
	];


    define set_contents()
	``{
	term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), RunlevelEd::Summary()),
		  `VSpacing(0.5),
		  `HBox(
		      // button label
			`PushButton(`id(`configure), _("&Configure Runlevels")),
			`HStretch(),
		      // button label
			`PushButton(`id(`reset), _("&Reset Configuration"))
			),
		  `VSpacing(1)
		  );
	// dialog heading
	Wizard::SetContents(_("Runlevel Configuration"),
			    contents, "", true, true);
    }

    set_contents();
    any result = nil;
    any ret = nil;
    repeat {
	ret = UI::UserInput();
	if (ret == `configure)
	{

	    Wizard::CreateDialog ();
	    Wizard::DisableAbortButton ();
	    Wizard::RestoreHelp (getHelpProgress ());
	    result = WizardSequencer (aliases, main_sequence);
	    UI::CloseDialog ();
	    if (result == `next || result == `finish)
	    {
		settings = RunlevelEd::Export ();
	    }
	    RunlevelEd::Import(settings);
	    set_contents();
	}
	else if ( ret == `reset)
	{
	    settings= $[];
	    RunlevelEd::Import(settings);
	    set_contents();
	}
    } until (ret == `back || ret == `next || ret ==`key || ret == `abort);

    return [ret, settings];

}

